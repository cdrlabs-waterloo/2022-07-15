"""
This script creates the file `cmbtr_pairs.vh` based on the required
number of random bits.
"""

from sys import argv
import random

CASR_LEN = 37
LFSR_LEN = 43

verilog_header = """
// Automatically generated by a python script (`cmbtr.py`)

`default_nettype none

`ifndef RTL

module cmbtr (
  input  wire [79:0]             i_cmbtr_state,     // [79:37] LFSR state, [36:0] CASR state
  output wire [{RANDBITS_LEN}-1:0]     o_cmbtr_randbits); // random bits output vector

  wire [42:0] lfsr_state = i_cmbtr_state[79:37];
  wire [36:0] casr_state = i_cmbtr_state[36:0];

"""

verilog_footer = """
endmodule

`endif
"""

def random_derangement(n):
    while True:
        v = [i for i in range(n)]
        for j in range(n - 1, -1, -1):
            p = random.randint(0, j)
            if v[p] == j:
                break
            else:
                v[j], v[p] = v[p], v[j]
        else:
            if v[0] != 0:
                return v

def find_pairs(npair):
    # this is an overkill, a usual rand assignment would be enough
    pairs = set()
    while len(pairs) < npair:
        lfsr = random_derangement(LFSR_LEN)
        casr = random_derangement(CASR_LEN)
        length = min(LFSR_LEN, CASR_LEN)
        for i in range(length):
            pairs.add((lfsr[i], casr[i]))
            if len(pairs) >= npair:
                break
    return pairs

def print_stat(name, stat):
    stat = {k: v for k, v in sorted(stat.items(), key=lambda item: item[1])}
    print(f'// Loading of {name} pins:')
    for pin, loads in stat.items():
        print(f'//   {pin: <4}: {loads}')

if __name__ == '__main__':
    if len(argv) != 2:
        print(f'USAGE: {argv[0]} <RANDBITS_LEN>')
        exit(1)

    npair = int(argv[1])
    pairs = find_pairs(npair)

    stat_lfsr, stat_casr = {}, {}
    for l, c in pairs:
        stat_lfsr.setdefault(l, 0)
        stat_casr.setdefault(c, 0)
        stat_lfsr[l] += 1
        stat_casr[c] += 1

    print('// This file was automatically generated by `digital/python/cmbtr.py`')
    print('//')
    print_stat('LFSR', stat_lfsr)
    print_stat('CASR', stat_casr)
    print(verilog_header.format(RANDBITS_LEN=npair))
    for i, (lfsr, casr) in enumerate(pairs):
        print(f'assign o_cmbtr_randbits[{i}] = lfsr_state[{lfsr}] ^ casr_state[{casr}];')
    print(verilog_footer)

